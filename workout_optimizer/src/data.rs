use std::collections::HashMap;
use crate::structs::{Exercise, MuscleGroup};

pub fn muscle_recovery_days() -> HashMap<String, i32> {
    [
        ("Chest".to_string(), 2),
        ("Triceps".to_string(), 1),
        ("Long Head".to_string(), 1),
        ("Front Delts".to_string(), 1),
        ("Lateral Delts".to_string(), 1),
        ("Rear Delts".to_string(), 1),
        ("Lats".to_string(), 2),
        ("Mid Traps".to_string(), 2),
        ("Upper Traps".to_string(), 2),
        ("Lower Traps".to_string(), 2),
        ("Biceps".to_string(), 1),
        ("Quads".to_string(), 2),
        ("Rectus Femoris".to_string(), 2),
        ("Hamstrings".to_string(), 2),
        ("Short Head".to_string(), 2),
        ("Glutes".to_string(), 2),
        ("Lower Back".to_string(), 2),
    ].iter().cloned().collect()
}

pub fn exercises() -> Vec<Exercise> {
    vec![
        Exercise {
            name: "Incline Bench Press".to_string(),
            primary: vec!["Chest".to_string(), "Triceps".to_string(), "Front Delts".to_string()],
            secondary: vec![],
            isometric: vec!["Lower Back".to_string()],
            is_compound: true,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Front Raise".to_string(),
            primary: vec!["Front Delts".to_string()],
            secondary: vec![],
            isometric: vec!["Biceps".to_string()],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Lateral Raise".to_string(),
            primary: vec!["Lateral Delts".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Leg Extension".to_string(),
            primary: vec!["Quads".to_string(), "Rectus Femoris".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: true,
            critical: false,
        },
        Exercise {
            name: "Cable Curl".to_string(),
            primary: vec!["Biceps".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Pulldown".to_string(),
            primary: vec!["Lats".to_string(), "Biceps".to_string()],
            secondary: vec!["Lower Traps".to_string(), "Rear Delts".to_string()],
            isometric: vec![],
            is_compound: true,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Squat".to_string(),
            primary: vec!["Quads".to_string(), "Glutes".to_string()],
            secondary: vec!["Hamstrings".to_string(), "Lower Back".to_string()],
            isometric: vec!["Lower Back".to_string()],
            is_compound: true,
            is_leg: true,
            critical: false,
        },
        Exercise {
            name: "Rear Delts".to_string(),
            primary: vec!["Rear Delts".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Shrugs".to_string(),
            primary: vec!["Upper Traps".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Kelso Shrugs".to_string(),
            primary: vec!["Mid Traps".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Chest Fly".to_string(),
            primary: vec!["Chest".to_string()],
            secondary: vec!["Front Delts".to_string()],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Upper Back Rows".to_string(),
            primary: vec!["Mid Traps".to_string(), "Rear Delts".to_string()],
            secondary: vec!["Lats".to_string(), "Biceps".to_string()],
            isometric: vec!["Lower Back".to_string()],
            is_compound: true,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Triceps Extension".to_string(),
            primary: vec!["Triceps".to_string(), "Long Head".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
        Exercise {
            name: "Leg Curl".to_string(),
            primary: vec!["Hamstrings".to_string(), "Short Head".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: true,
            critical: false,
        },
        Exercise {
            name: "Stiff-Legged Deadlift".to_string(),
            primary: vec!["Hamstrings".to_string(), "Glutes".to_string()],
            secondary: vec!["Lower Back".to_string()],
            isometric: vec!["Lower Back".to_string(), "Upper Traps".to_string()],
            is_compound: true,
            is_leg: true,
            critical: false,
        },
        Exercise {
            name: "Lat Prayer".to_string(),
            primary: vec!["Lats".to_string(), "Long Head".to_string()],
            secondary: vec![],
            isometric: vec![],
            is_compound: false,
            is_leg: false,
            critical: false,
        },
    ]
}

pub fn mav_targets() -> HashMap<String, MuscleGroup> {
    [
        ("Chest".to_string(), MuscleGroup { target: 12.0, upper_bound: 18.0 }),
        ("Triceps".to_string(), MuscleGroup { target: 10.0, upper_bound: 16.0 }),
        ("Long Head".to_string(), MuscleGroup { target: 10.0, upper_bound: 16.0 }),
        ("Front Delts".to_string(), MuscleGroup { target: 8.0, upper_bound: 14.0 }),
        ("Lateral Delts".to_string(), MuscleGroup { target: 12.0, upper_bound: 18.0 }),
        ("Rear Delts".to_string(), MuscleGroup { target: 12.0, upper_bound: 18.0 }),
        ("Lats".to_string(), MuscleGroup { target: 14.0, upper_bound: 20.0 }),
        ("Mid Traps".to_string(), MuscleGroup { target: 8.0, upper_bound: 14.0 }),
        ("Upper Traps".to_string(), MuscleGroup { target: 8.0, upper_bound: 14.0 }),
        ("Lower Traps".to_string(), MuscleGroup { target: 14.0, upper_bound: 20.0 }),
        ("Biceps".to_string(), MuscleGroup { target: 14.0, upper_bound: 20.0 }),
        ("Quads".to_string(), MuscleGroup { target: 12.0, upper_bound: 18.0 }),
        ("Rectus Femoris".to_string(), MuscleGroup { target: 12.0, upper_bound: 18.0 }),
        ("Hamstrings".to_string(), MuscleGroup { target: 10.0, upper_bound: 16.0 }),
        ("Short Head".to_string(), MuscleGroup { target: 10.0, upper_bound: 16.0 }),
        ("Glutes".to_string(), MuscleGroup { target: 12.0, upper_bound: 18.0 }),
        ("Lower Back".to_string(), MuscleGroup { target: 12.0, upper_bound: 18.0 }),
    ].iter().cloned().collect()
}